{"version":3,"sources":["api.js","login-page.js","Poll.js","loader.js","resultPage.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","Api","fetchResult","a","fetch","savePoll","user","option","method","headers","Accept","body","JSON","stringify","name","LoginPage","state","phone","error","phoneNumbers","console","log","this","setState","props","showLoader","response","json","responseJson","votes","data","alreadyVoted","filter","vote","userName","length","onComplete","Alert","severity","color","className","TextField","id","label","variant","onChange","e","target","value","Fab","aria-label","onClick","checkPhoneNumber","React","Component","Poll","onOptionChosen","Loader","CircularProgress","ResultPage","showChart","tableData","then","resp","result","counts","op1Votes","op2Votes","forEach","poll","chosenOption","push","datasets","backgroundColor","labels","i","b","map","key","App","currentPage","show","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.799539b1.chunk.js","sourcesContent":["// const BASE_URL = \"http://localhost:3670\"\nconst BASE_URL = \"https://sleepy-brushlands-28308.herokuapp.com\"\n\nclass Api {\n  static fetchResult = async () => {\n    return fetch(`${BASE_URL}/result`)\n  }\n\n  static savePoll = async (user, option) => {\n    return fetch(`${BASE_URL}/new`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name: user,\n        option,\n      }),\n    })\n  }\n}\n\nexport default Api\n","import React from \"react\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Fab from \"@material-ui/core/Fab\"\nimport \"./form.css\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport Api from \"./api\"\n\nclass LoginPage extends React.Component {\n  state = {\n    phone: \"\",\n    error: null,\n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  phoneNumbers = {\n    \"Akash_16\": \"Akash\",\n    \"Ashish_13\": \"Ashish\",\n    \"Jaison_8\": \"Jaison\",\n    \"Raghav_87\": \"Raghav\",\n    \"Rajat_77\": \"Rajat\",\n    \"Vidur_8\": \"Vidur\",\n    \"Divyansh_94\": \"Divyansh\",\n    \"Abhishek_61\": \"Abhishek\",\n    \"Phil_7\": \"Phil\",\n    \"Roshan_40\": \"Roshan\",\n  }\n\n  async checkPhoneNumber () {\n    console.log(this.state.phone)\n    if (this.phoneNumbers[this.state.phone]) {\n      this.setState({ error: null })\n      this.props.showLoader(true)\n      const response = await Api.fetchResult()\n      const responseJson = await response.json()\n      const votes = responseJson.data\n      const alreadyVoted = ((votes.filter(vote => vote.userName === this.phoneNumbers[this.state.phone]).length) > 0)\n      this.props.showLoader(false)\n      this.props.onComplete(this.phoneNumbers[this.state.phone], alreadyVoted)\n    } else {\n      this.setState({ error: \"Chal BhenChod!\" })\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.error && (\n          <Alert severity=\"error\" color=\"info\">\n            {this.state.error}\n          </Alert>\n        )}\n        <div className=\"form-container\">\n          <div className=\"form\">\n            <TextField\n              className=\"input-field\"\n              id=\"outlined-basic\"\n              label=\"Secret\"\n              variant=\"outlined\"\n              onChange={(e) => {\n                this.setState({ phone: e.target.value })\n              }}\n            />\n          </div>\n          <Fab\n            className=\"fab\"\n            color=\"primary\"\n            aria-label=\"add\"\n            onClick={() => {\n              this.checkPhoneNumber()\n            }}\n          >\n            Go\n          </Fab>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default LoginPage\n","import React, { Component } from \"react\"\nimport \"./poll.css\"\nimport Api from \"./api\"\n\nclass Poll extends Component {\n  state = {}\n\n  onOptionChosen = async (option) => {\n    this.props.showLoader(true)\n    const response = await Api.savePoll(this.props.user, option)\n    this.props.showLoader(false)\n    this.props.onComplete()\n  }\n\n  render() {\n    return (\n      <div className=\"poll-container\">\n        <h1>Choose a rule {this.props.user}</h1>\n        <div\n          onClick={() => {\n            this.onOptionChosen(\"Option1\")\n          }}\n          className=\"poll-button\"\n        >\n          Add all games, unless all 4 players vote unanimously to do otherwise.\n        </div>\n        <div\n          onClick={() => {\n            this.onOptionChosen(\"Option2\")\n          }}\n          className=\"poll-button border-bottom\"\n        >\n          <p>\n            If Highest point guy gets disconnected then game cancelled.{\" \"}\n            <br></br>\n            <br></br>If anybody else exits then if someone has lead of > 2000\n            AND boot size >=40 THEN ADD game as it is.\n          </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Poll\n","import React, { Component } from \"react\"\nimport CircularProgress from \"@material-ui/core/CircularProgress\"\nimport \"./loader.css\"\n\nclass Loader extends Component {\n  state = {}\n  render() {\n    return (\n      <div className=\"loader-container\">\n        <div className=\"loader\">\n          <CircularProgress />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Loader\n","import React, { Component } from \"react\"\nimport \"./result.css\"\nimport { Doughnut, Pie } from \"react-chartjs-2\"\nimport Api from \"./api\"\n\nclass ResultPage extends Component {\n  state = {\n    showChart: false,\n    data: {},\n    tableData: null,\n  }\n\n  componentDidMount() {\n    Api.fetchResult()\n      .then((resp) => resp.json())\n      .then((result) => {\n        console.log(result)\n        let counts = [0, 0]\n        let op1Votes = []\n        let op2Votes = []\n        result.data.forEach((poll) => {\n          if (poll.chosenOption == \"Option1\") {\n            counts[0] += 1\n            op1Votes.push(poll.userName)\n          } else if (poll.chosenOption == \"Option2\") {\n            counts[1] += 1\n            op2Votes.push(poll.userName)\n          }\n        })\n        const data = {\n          datasets: [\n            {\n              data: counts,\n              backgroundColor: [\"#3e95cd\", \"#8e5ea2\"],\n            },\n          ],\n          labels: [\"Simple\", \"Complicated\"],\n        }\n\n        if (op1Votes.length > op2Votes.length) op2Votes.length = op1Votes.length\n        else op1Votes.length = op2Votes.length\n\n        let votes = []\n        for (let i = 0; i < op1Votes.length; i++) {\n          votes.push({ a: op1Votes[i], b: op2Votes[i] })\n        }\n        this.setState({\n          showChart: true,\n          data,\n          tableData: votes,\n        })\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"result-container\">\n        <div>\n          {!this.state.showChart && <h1>Loading...</h1>}\n          {this.state.showChart && <Pie data={this.state.data} />}\n          {this.state.showChart && (\n            <div>\n              <table>\n                <tr>\n                  <th>Simple</th>\n                  <th>Complex</th>\n                </tr>\n                {this.state.tableData.map(vote => (<tr key={vote.a}>\n                    <td>{vote.a}</td>\n                    <td>{vote.b}</td>\n                </tr>))}\n              </table>\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ResultPage\n","import React from \"react\"\nimport \"./App.css\"\nimport LoginPage from \"./login-page\"\nimport Poll from \"./Poll\"\nimport Loader from \"./loader\"\nimport ResultPage from \"./resultPage\"\n\nclass App extends React.Component {\n  state = {\n    currentPage: \"login\",\n    showLoader: false,\n  }\n\n  showLoader(show) {\n    console.log(show)\n    this.setState({ showLoader: show })\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.currentPage == \"login\" && (\n          <LoginPage\n            showLoader={(show) => {\n              this.showLoader(show)\n            }}\n            onComplete={(user, alreadyVoted) => {\n              console.log(\"Hi\")\n              if (alreadyVoted) {\n                this.setState({\n                  currentPage: \"result\",\n                  user,\n                })\n              } else\n                this.setState({\n                  currentPage: \"poll\",\n                  user,\n                })\n            }}\n          />\n        )}\n        {this.state.currentPage == \"poll\" && (\n          <Poll\n            showLoader={(show) => {\n              this.showLoader(show)\n            }}\n            user={this.state.user}\n            onComplete = {() => {\n              this.setState({\n                currentPage: \"result\",\n              })\n            }}\n          />\n        )}\n        {this.state.currentPage == \"result\" && (\n          <ResultPage\n            showLoader={(show) => {\n              this.showLoader(show)\n            }}\n            user={this.state.user}\n          />\n        )}\n        {this.state.showLoader && <Loader />}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}